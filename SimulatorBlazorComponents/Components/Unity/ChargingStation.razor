@using SimulatorBlazorComponents.Unity
@using SimulatorBlazorComponents.Model

@implements IDisposable

@code {
    [CascadingParameter]
    public GardenSimulator GS { get; set; } = null!;

    [Parameter] public float X { get; set; } = 0;
    [Parameter] public float Y { get; set; } = 0;
    [Parameter] public float Rotation { get; set; } = 0;

    private ChargingStationTransform _cs = new(90, new(0, 0));
    private ChargingStationTransform _lastCs = new(90, new(0, 0));

    public void Dispose()
    {
        GS.Loader.UnityInstanceLoaded -= OnUnityLoaded;
    }

    protected override void OnInitialized()
    {
        if (GS.Loader.IsInstanceLoaded)
        {
            _ = GS.Bridge.Pipe("Routers", "SetChargingStationPosition", _cs);
        }
        else
        {
            GS.Loader.UnityInstanceLoaded += OnUnityLoaded;
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _cs = new ChargingStationTransform(Rotation, new Vector2(X, Y));
    }

    protected override bool ShouldRender()
    {
        if (_cs.Equals(_lastCs)) return false;
        _lastCs = _cs;
        return true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!GS.Loader.IsInstanceLoaded) return;
        _ = GS.Bridge.Pipe("Routers", "SetChargingStationPosition", _cs);
    }

    private void OnUnityLoaded(object sender, UnityInstanceEventArgs args)
    {
        _ = GS.Bridge.Pipe("Routers", "SetChargingStationPosition", _cs);
    }
}